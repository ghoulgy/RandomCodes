# SCY unpack sample
# 727154B9F1DDE82E969DDADA3D33D361596FC243

import pefile

target_file = pefile.PE("test_SCY")

ImageBase = target_file.OPTIONAL_HEADER.ImageBase
print(f"ImageBase: {hex(target_file.OPTIONAL_HEADER.ImageBase)}")

EntryPoint = target_file.OPTIONAL_HEADER.AddressOfEntryPoint
print(f"AddressOfEntryPoint: {hex(target_file.OPTIONAL_HEADER.AddressOfEntryPoint)}")

index = 0

# Fix import offset
data = {}
for idx, iid in enumerate(target_file.DIRECTORY_ENTRY_IMPORT):
	if target_file.get_string_at_rva(iid.struct.Name, pefile.MAX_IMPORT_NAME_LENGTH) != b"?": 
		ilt_rva = iid.struct.OriginalFirstThunk
		ilt = target_file.get_import_table(ilt_rva)
		
		# iat_rva = iid.struct.FirstThunk
		# iat = target_file.get_import_table(iat_rva)
		for ilt_data in ilt:
			fun_name = target_file.get_string_at_rva(ilt_data.AddressOfData + 2 , pefile.MAX_IMPORT_NAME_LENGTH)
			# print(f"Name: {fun_name}")
			
			call_via = iid.struct.FirstThunk + index
			fixed_call_via = original = call_via - 0xc7a00000 # It is different for each samples (Corrupted EntryPoint - (ImageBase - EntryPoint))
			# print(f"Fixed call_via: {hex(fixed_call_via)}")
			# print(f"Original call_via: {hex(call_via)}")
			data[fixed_call_via] = fun_name

			index = index + 0x8

		index = 0

# Data rename
start_addr = 0x13F691000
end_addr = 0x13F6FEFFE
function_count = {}

while start_addr < end_addr:
	if idc.get_operand_type(start_addr, 0) == 2 and idc.print_insn_mnem(start_addr) == "call" and \
		"qword" in idc.print_operand(start_addr, 0):
		#print(hex(start_addr))
		qword_offset = idc.get_operand_value(start_addr, 0)
		#print(hex(qword_offset))
		no_rva_qword_offset = qword_offset - ImageBase
		#print(hex(no_rva_qword_offset))

		if data.get(no_rva_qword_offset, False):
			decoded_func_name = data[no_rva_qword_offset].decode()
			print(f"{hex(start_addr)}: {decoded_func_name}")

			if function_count.get(decoded_func_name, False): 
				function_count[decoded_func_name] = function_count[decoded_func_name] + 1

			else:
				function_count[decoded_func_name] = 1				

			idc.set_name(idc.get_operand_value(start_addr, 0), f"{decoded_func_name}_{function_count[decoded_func_name]})")
					
		else:
			print(f"Match Not Found: {hex(start_addr)}")

	start_addr = idc.next_head(start_addr)
