import pefile

def rol(n, d):
	INT_BITS = 32
	return (n << d | n >> (INT_BITS - d))


def bazar_func_name_hash(func):
	seed = 0

	for c in func:
		rolled_seed = rol(seed, 7)
		temp_hash = ((ord(c) + 5) & ~rolled_seed) | (rolled_seed & (-6 -ord(c))) & 0xffffffff
		seed = temp_hash

	return seed


def bazar_func_hash_verify_gen(a2, a3):
	return (~a2 & 0x4D6C2579 | a2 & 0xB293DA86) ^ (~a3 & 0x4D6C2579 | a3 & 0xB293DA86)

import json

with open("hash.json", "r") as json_file:
	hash_data = json.load(json_file)

hash_api_function_addr = 0x35E2C0
xrefs = CodeRefsTo(hash_api_function_addr, 0)

for xref in xrefs:
	prev_addr = idc.prev_head(xref)
	prev_addr_2 = idc.prev_head(prev_addr)
	prev_addr_3 = idc.prev_head(prev_addr_2)

	if idc.print_insn_mnem(prev_addr) == "mov" and \
		idc.print_insn_mnem(prev_addr_2) == "mov" and \
		idc.print_insn_mnem(prev_addr_3) == "mov":

		if idc.get_operand_type(prev_addr_2, 1) == idc.o_imm and \
			idc.get_operand_type(prev_addr, 1) == idc.o_imm:

			# print(hex(xref))

			a2 = get_operand_value(prev_addr_2, 1) & 0xffffffff
			a3 = get_operand_value(prev_addr, 1) & 0xffffffff
			if hash_data.get(str(hex(bazar_func_hash_verify_gen(a2, a3))), False):
				print(f"{hex(xref)}: {hash_data.get(str(hex(bazar_func_hash_verify_gen(a2, a3))), False)}")
				idc.set_cmt(xref, hash_data.get(str(hex(bazar_func_hash_verify_gen(a2, a3))), False), 1)

			else:
				print(f"Error lvl 3 addr: {hex(xref)}")

			# print(hex(get_operand_value(prev_addr_2, 1) & 0xffffffff))
			# print(hex(get_operand_value(prev_addr, 1) & 0xffffffff))
			# exit()

		else:
			print(f"Error lvl 2 addr: {hex(xref)}")	
	else:
		print(f"Error lvl 1 addr: {hex(xref)}")
