import pefile
# BazarLoader function name deobfuscator 
# Varient 6/2021

# Decompiled code
# do
# {
#   v20 = __ROL4__(v19, 7);
#   v21 = (v16 + 5) & ~v20 | v20 & (-6 - v16);
#   ++v17;
#   v16 = v22[v18++];
#   v19 = v21;
# }
# while ( v16 );

def rol(n, d):
	INT_BITS = 32
	return (n << d | n >> (INT_BITS - d))


def bazar_func_name_hash(func):
	seed = 0

	for c in func:
		rolled_seed = rol(seed, 7)
		temp_hash = ((ord(c) + 5) & ~rolled_seed) | (rolled_seed & (-6 -ord(c))) & 0xffffffff
		seed = temp_hash

	return seed


def bazar_func_hash_verify_gen(a2, a3):
	return (~a2 & 0x4D6C2579 | a2 & 0xB293DA86) ^ (~a3 & 0x4D6C2579 | a3 & 0xB293DA86)


dlls_name = [
	"kernel32.dll",
	"KernelBase.dll",
	"advapi32.dll",
	"user32.dll",
	"wininet.dll",
	"ntdll.dll",
	"ws2_32.dll",
	"netapi32.dll",
	"shell32.dll",
	"bcrypt.dll",
	"dnsapi.dll",
	"crypt32.dll",
	"ole32.dll",
	"shlwapi.dll",
	"cryptdll.dll"
]


for dll_name in dlls_name:
	pe = pefile.PE(dll_name)

	for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
		if exp.name:
			# if bazar_func_hash_verify_gen(a2, a3) == bazar_func_name_hash(exp.name.decode()):
			print(f"\"{hex(bazar_func_name_hash(exp.name.decode()))}\": \"{exp.name.decode()}\",")


# Single Unit Test (lstrcatA)
# a1 = 0xA11DED59
# a2 = 0xE15A45D8
# a3 = 0x9CA01AD1

# print(hex(~a3 & a1 | a3 & ~a1))
# print("Hash to be verify:")
# print(hex((~a2 & 0x4D6C2579 | a2 & 0xB293DA86) ^ (~a3 & 0x4D6C2579 | a3 & 0xB293DA86)))
