import os 
# proc_to_be_injected_index_offset = [0x8CD, 0x8F9, 0x670, 0x214] with sent_val = 0x1346

dec_routines = [0x10009F88, 0x100025D4, 0x10009F6E, 0x100025BA]
sentinel_val_const = [0x1346, 0x57D, 0x1346, 0x57D]
threshold_backwards = 5
is_found = False
found_count = 0
path = os.path.abspath(os.path.dirname(__file__))

def dec(index_offset, sent_val):
    if sent_val == 0x1346:
        file_dec_bytes = os.path.join(path, "qbot_dec_bytes")
        file_dec_keys = os.path.join(path, "qbot_dec_keys")
    else:
        file_dec_bytes = os.path.join(path, "qbot_dec_bytes_57d")
        file_dec_keys = os.path.join(path, "qbot_dec_keys_57d")

    with open(file_dec_bytes, "rb") as eb:
        enc_bytes = eb.read()
    eb.close()

    with open(file_dec_keys, "rb") as ek:
        enc_keys = ek.read()
    ek.close()
    
    dec_str_len = 0
    # index_offset = 0x515
    
    # if ( offset_index < sentinel_val_const )
    # {
    #   while ( *((offset_index_copy & 0x7F) + enc_keys) != *(offset_index_copy + enc_byte_2_copy) )
    #   {
    #     if ( ++offset_index_copy >= sentinel_val_const )
    #       goto LABEL_6;
    #   }
    #   v20 = offset_index_copy - offset_index;
    # }
    index_offset_copy = index_offset 
    
    while(enc_keys[(index_offset_copy & 0x7F)] != enc_bytes[index_offset_copy]):
        index_offset_copy += 1
        if index_offset_copy >= sent_val:
            break
        dec_str_len = index_offset_copy - index_offset
    
    # do
    # {
    #   *(v11 + 2 * v5++) = (*(offset_index + enc_bytes) ^ *((offset_index & 0x7F) + enc_keys));
    #   ++offset_index;
    # }
    # while ( v5 < v20 );
    dec_str = ""
    for i in range(dec_str_len):
        dec_str += chr(enc_bytes[index_offset + i] ^ enc_keys[((index_offset + i) & 0x7F)])
    print(dec_str)

    return dec_str


for dec_routine, sv in zip(dec_routines, sentinel_val_const):
    xrefs = CodeRefsTo(dec_routine, 0)

    for xref in xrefs:
        is_found = False
        backward_addr = xref
        # print(f"START {hex(xref)}")
        for i in range(threshold_backwards, 0, -1):    
            backward_addr = prev_head(backward_addr)
            
            if idc.print_insn_mnem(backward_addr) == "push" and idc.get_operand_type(backward_addr, 0) == idc.o_imm:
                first_const = idc.print_operand(backward_addr, 0)
                is_found = True
                first_param = int(first_const.rstrip('h'), 16)
                
                print(f"{hex(backward_addr)}: {first_const.rstrip('h')}")

                ds = dec(first_param, sv)
                idc.set_cmt(xref, ds, 0)

                break

            if idc.print_insn_mnem(backward_addr) == "mov" and idc.get_operand_type(backward_addr, 1) == idc.o_imm:
                first_const = idc.print_operand(backward_addr, 1)
                is_found = True
                first_param = int(first_const.rstrip('h'), 16)

                print(f"{hex(backward_addr)}: {first_const.rstrip('h')}")
                
                ds = dec(first_param, sv)
                idc.set_cmt(xref, ds, 0)

                break

        if not is_found:
            print(f"No const found for: {hex(xref)}")

