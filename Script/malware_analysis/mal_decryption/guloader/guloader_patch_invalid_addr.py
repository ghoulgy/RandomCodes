import idautils

'''
Example:

xor     eax, 9041E922h
xor     eax, 0C5E17181h
mov     [eax], edx // move to edx to a address
'''

search_byte = 0x89 # move dword ptr ds:[<REG>],<REG>

for addr in range(0x18F086A, 0x019A2092):
    if get_db_byte(addr) == search_byte and print_insn_mnem(addr) == "mov":
        prev_addr = prev_head(addr)
        prev_addr_1 = prev_head(prev_addr)
        prev_addr_2 = prev_head(prev_addr_1)

        if get_operand_type(prev_addr, 0) == idc.o_reg and get_operand_type(prev_addr, 1) == idc.o_imm \
        and print_operand(prev_addr, 0) in print_operand(addr, 0) \
        and get_operand_type(prev_addr_1, 0) == idc.o_reg and get_operand_type(prev_addr_1, 1) == idc.o_imm \
        and get_operand_type(prev_addr_2, 0) == idc.o_reg and get_operand_type(prev_addr_2, 1) == idc.o_imm:
            print(f"The {hex(addr)}: {hex(get_operand_value(prev_addr, 1))}")
            
            addr_ofs = get_db_byte(addr + 2)
            # print(hex(addr_ofs))
            nxt_jmp_addr = addr + (addr_ofs ^ 0x74)
            print(f"Byte 0x89 found at address: 0x{addr:08X}")
            # print(hex(address))
            print(f"Next jump addr: {hex(nxt_jmp_addr)}")
            
            range_to_nxt_byte = nxt_jmp_addr - addr - 2      
            if range_to_nxt_byte > 0:
                patch_bytes = f"{nxt_jmp_addr-addr-2:02x}"+"eb"
                print(f"Byte code to patch in 0x{addr:08X}: {patch_bytes}")
                print(hex(int(patch_bytes, 16)))
                ida_bytes.patch_word(addr, int(patch_bytes, 16))
