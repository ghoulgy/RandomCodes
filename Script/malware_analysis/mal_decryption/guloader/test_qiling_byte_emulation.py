from qiling import Qiling
from qiling.const import QL_VERBOSE, QL_ARCH, QL_OS
from unicorn import UC_PROT_ALL

if __name__ == "__main__":
    with open("zzz.bin", "rb") as f:
        ctx = f.read()
    
    print(bytes.fromhex('fc4881e4'))
    print(hex(len(ctx)))

    # ctx=ctx[0x192BAEc:0x0192BB16]
    # ctx=ctx[0x192BBA0:0x0192BBC5]
    ctx=ctx[0x18FD991 :0x18FD9A2]

    print(ctx)
    # initialize Qiling instance
    ql = Qiling(code=ctx, 
                rootfs="C:\\Users\\blazara\\Desktop\\win10\\examples\\rootfs\\x86_windows",
                archtype=QL_ARCH.X86,
                ostype=QL_OS.WINDOWS)
                # verbose=QL_VERBOSE.DEBUG)

    STACK_ADDR = 0x30000
    # CODE_ADDR = 0x10000
    
    # ql.mem.map(CODE_ADDR, 0x3317, UC_PROT_ALL)
    # ql.mem.write(CODE_ADDR, buf)
    
    ql.mem.map(STACK_ADDR - 0x10000, 0x10000, UC_PROT_ALL)
    ql.arch.regs.write("esp", STACK_ADDR)
    ql.arch.regs.write("ebp", STACK_ADDR) 
    # ql.mem.map(ql.reg.ebx//4096*4096, 4096)
    # ql.mem.map(ql.reg.ecx//4096*4096, 4096)
    # ql.mem.map(ql.reg.edx//4096*4096, 4096)

    # hook at an address with a callback
    ql.run()

    # print(ql.mem.read(STACK_ADDR+0x197, 0x4)
    print(hex(ql.arch.regs.edx))
    # print(hex(ql.unpack32(ql.mem.read(STACK_ADDR+0x20b, 0x4))))